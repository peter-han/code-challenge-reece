plugins {
    id 'application'
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.avast.gradle.docker-compose" version "0.14.3"
    id 'jacoco'
//    id 'pmd'
//    id "com.github.spotbugs" version "4.7.2"
}

repositories {
    mavenCentral()
}

group 'com.phan.codechallenge'
sourceCompatibility = JavaLanguageVersion.of(8)

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation(
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springdoc:springdoc-openapi-ui:1.5.9',
            'org.postgresql:postgresql',
            'org.flywaydb:flyway-core',
            'org.apache.commons:commons-lang3',
    )

    testImplementation(
            'org.springframework.boot:spring-boot-starter-test',
            'org.junit.jupiter:junit-jupiter-api'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine'
    )
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    dependsOn composeUp
    finalizedBy composeDown
    finalizedBy jacocoTestReport
}

dockerCompose {
    useComposeFiles = ['src/main/docker/compose/docker-compose.yaml']
    dependsOn bootBuildImage
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/Application.*')
        }))
    }
}