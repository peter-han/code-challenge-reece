plugins {
    id 'application'
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.avast.gradle.docker-compose" version "0.14.3"
    id 'pmd'
//    id 'checkstyle'
    id 'jacoco'
}

repositories {
    mavenCentral()
}

group 'com.phan.codechallenge'
sourceCompatibility = JavaLanguageVersion.of(8)

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation(
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.postgresql:postgresql',
            'org.flywaydb:flyway-core',
            'org.apache.commons:commons-lang3',
    )

    testImplementation(
            'org.springframework.boot:spring-boot-starter-test',
            'org.junit.jupiter:junit-jupiter-api'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine'
    )
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    dependsOn composeUp
    finalizedBy composeDown
    finalizedBy jacocoTestReport
}

dockerCompose {
    useComposeFiles = ['src/main/docker/compose/docker-compose.yaml']
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/Application.*')
        }))
    }
}

//checkstyle {
//    toolVersion = '6.11.2'
//    ignoreFailures = true
//    configFile = rootProject.file('checkstyle.xml')
//}

pmd {
    ignoreFailures = true
    ruleSetFiles = files("${rootProject.rootDir}/config/pmd/pmd.xml")
}
//findbugs {
//    ignoreFailures = true
//    findbugsTest.enabled = false
//}
//
//tasks.withType(Checkstyle) {
//    reports {
//        xml.enabled false
//        html.enabled true
////        html.stylesheet resources.text.fromFile('config/xsl/checkstyle-frames-errors.xsl')
//    }
//}
//tasks.withType(FindBugs) {
//    reports {
//        xml.enabled = false
//        html.enabled = true
//    }
//}
//tasks.withType(Pmd) {
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//}
//test { finalizedBy jacocoTestReport }